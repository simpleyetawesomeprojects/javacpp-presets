// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.hyperscan;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.hyperscan.global.hyperscan.*;


/**
 * The type of the callback function that will be used by Chimera to allocate
 * more memory at runtime as required.
 *
 * If Chimera is to be used in a multi-threaded, or similarly concurrent
 * environment, the allocation function will need to be re-entrant, or
 * similarly safe for concurrent use.
 *
 * @param size
 *      The number of bytes to allocate.
 * @return
 *      A pointer to the region of memory allocated, or NULL on error.
 */
@Properties(inherit = org.bytedeco.hyperscan.presets.hyperscan.class)
public class ch_alloc_t extends FunctionPointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public    ch_alloc_t(Pointer p) { super(p); }
    protected ch_alloc_t() { allocate(); }
    private native void allocate();
    public native Pointer call(@Cast("size_t") long size);
}

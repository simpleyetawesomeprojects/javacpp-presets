// Targeted by JavaCPP version 1.5.8-SNAPSHOT: DO NOT EDIT THIS FILE

package org.bytedeco.hyperscan;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.bytedeco.javacpp.presets.javacpp.*;

import static org.bytedeco.hyperscan.global.hyperscan.*;

// #endif

/**
 * A type containing error details that is returned by the compile calls (\ref
 * ch_compile() and \ref ch_compile_multi() on failure. The caller may inspect
 * the values returned in this type to determine the cause of failure.
 */
@Properties(inherit = org.bytedeco.hyperscan.presets.hyperscan.class)
public class ch_compile_error_t extends Pointer {
    static { Loader.load(); }
    /** Default native constructor. */
    public ch_compile_error_t() { super((Pointer)null); allocate(); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public ch_compile_error_t(long size) { super((Pointer)null); allocateArray(size); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public ch_compile_error_t(Pointer p) { super(p); }
    private native void allocate();
    private native void allocateArray(long size);
    @Override public ch_compile_error_t position(long position) {
        return (ch_compile_error_t)super.position(position);
    }
    @Override public ch_compile_error_t getPointer(long i) {
        return new ch_compile_error_t((Pointer)this).offsetAddress(i);
    }

    /**
     * A human-readable error message describing the error.
     */
    public native @Cast("char*") BytePointer message(); public native ch_compile_error_t message(BytePointer setter);

    /**
     * The zero-based number of the expression that caused the error (if this
     * can be determined). If the error is not specific to an expression, then
     * this value will be less than zero.
     */
    public native int expression(); public native ch_compile_error_t expression(int setter);
}
